# -*- coding: utf-8 -*-
"""Build A simple Stock Movement Classifier.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FOzushNPtBy6xhzervHEtEkvi0uUJu8Q
"""

# Description: Use stock indicators with machine learning to try to predict the direction of a stocks price

#Import the libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
from sklearn.model_selection import train_test_split

!pip install yfinance

# Load the data set
import yfinance as yf
df = yf.download("GOOG", start="2019-06-03", end="2019-12-17")

df

#Create functions to calculate teh Simpple Moving Average (SMA) & the Exponential Moving Average(EMA)
# Typical time periods for moving averages are 15, 20, & 30
# Create the Simple Moving Average (EMA)
def SMA(data, period=30, column='Close'):
  return data[column].rolling(window=period).mean()

# Create teh Exponential Moving Average (EMA)
def EMA( data, period=20, column='Close'):
  return data[column].ewm(span=period, adjust=False).mean()

# Create a function to calculate the Moving Average Convergence / Divergence(MACD)

def MACD(data, period_long=26, period_short=21, period_signal=9, column='Close'):
  #calculate the Short Term EMA
  ShortEMA= EMA(data, period=period_short, column=column)
  # Calculate the Long Term EMA
  LongEMA=EMA(data, period=period_long, column=column)
  #Calculate the store the MACD into the data frame
  data['MACD']=ShortEMA - LongEMA
  #Calculate the signal line and store it into the data frame
  data['signal_Line']=EMA(data, period=period_signal, column='MACD')
  return data

# Create a function to calculate the Relative Strength Index(RSI)

def  RSI( data,  period=14, column='Close'):
  delta= data[column].diff(1)
  delta=delta.dropna()
  up= delta.copy()
  down=delta.copy()
  up[up<0] = 0
  down[down > 0] = 0
  data['up']=up
  data['down']=down
  AVG_Gain=SMA(data, period, column='up')
  AVG_Loss= abs(SMA(data, period, column='down'))
  RS=AVG_Gain/ AVG_Loss
  RSI=100.0-(100.0/(1.0+RS))

  data['RSI']= RSI
  return data

# Add the indicators to the data set
MACD(df)
RSI(df)
df['SMA']=SMA(df)
df['EMA']=EMA(df)
#Show the data
df

# Create the Target Column
df['Target']= np.where(df['Close'].shift(-1) > df['Close'],1, 0)

# Show the data
df

# Remove the first 29 days of data
df=df[29:]

df

# Split the data set into feature or independent data set(X) and a Target or dependent data set(Y)
keep_columns=['Close', 'MACD', 'signal_Line','RSI','SMA', 'EMA']
X=df[keep_columns].values
Y=df['Target'].values

# Split the data again but this time into 80% training and 20% testing data sets
X_train, X_test, Y_train, Y_test= train_test_split(X,Y, test_size=0.2, random_state=2)

from sklearn import tree

# Create and train the decision tree classifier model
tree= tree.DecisionTreeClassifier().fit(X_train,Y_train)

#Check how well the model did on the training data set
print(tree.score(X_train, Y_train))

#Check how well the model did on the testing data set
print(tree.score(X_test,Y_test))

# Show the model tree predictions
tree_predictions=tree.predict(X_test)
print(tree_predictions)

#Show the actaul values from the test data
Y_test

# Get the model metrics
from sklearn.metrics import classification_report
print(classification_report(Y_test, tree_predictions))